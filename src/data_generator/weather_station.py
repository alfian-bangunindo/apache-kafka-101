import random
from datetime import datetime, timedelta

COMPASS_POINTS = [
    "North",
    "North-East",
    "East",
    "South-East",
    "South",
    "South-West",
    "West",
    "North-West",
]
LATITUDE_BOUNDARY = [-7.1270435, -7.4220966]
LONGITUDE_BOUNDARY = [112.5716959, 112.8667491]


class DummyDataWeatherStation:
    """
    This class generate fake streaming data of weather station
    """

    def __init__(self, num_devices: int):
        """
        Initialize weather station devices with name of weather-station-1, weather-station-2, and so on. based on `num_devices` input.
        It will also randomly initialize temperature, humidity percentage, wind speed, wind direction, precipitation and uv index.
        The locations of the devices are limited to Surabaya city.
        """
        self.num_devices = num_devices
        self.devices = [f"weather-station-{i}" for i in range(1, self.num_devices + 1)]
        self._initialize_location()
        self._initialize_sensors()

    def _initialize_location(self):
        """
        Initialize random location for each devices within Surabaya city boundary.
        """
        self.locations = {
            d: (
                round(random.uniform(LATITUDE_BOUNDARY[0], LATITUDE_BOUNDARY[1]), 6),
                round(random.uniform(LONGITUDE_BOUNDARY[0], LONGITUDE_BOUNDARY[1]), 6),
            )
            for d in self.devices
        }

    def _initialize_sensors(self):
        """
        Initialize each sensors read by each devices based on random distribution:

        temperature: generated by uniform distribution with range of 26 to 32 Celcius.
        humidity: generated by integer uniform distribution with range of 50 to 80%.
        wind_speed: generated by uniform distribution with range of 5 to 10 km/h.
        wind_direction: generated by uniform distribution from list of compass points.
        precipitation: generated by uniform distribution with range of 0 to 10 mm.
        uv_index: conditionally generated based on precipitation.
        """
        # Handle temperature and humidity
        self.last_temperature = {d: random.uniform(26, 32) for d in self.devices}
        self.last_humidity = {d: random.randint(50, 80) for d in self.devices}

        # Handle wind speed and direction
        self.last_wind_speed = {d: random.uniform(5, 10) for d in self.devices}
        self.last_wind_direction = {
            d: random.choice(COMPASS_POINTS) for d in self.devices
        }

        # Handle precipitation and uv_index
        self.last_precipitation = {}
        self.last_uv_index = {}

        # Conditionally handle precipitation and uv_index
        for d in self.devices:
            if random.random() < 0.5:  # Probability of rain is 50%
                rain = random.uniform(0.5, 10)
                if rain < 2:
                    # If weak rain, uv_index is slightly higher
                    uv = random.uniform(1, 4)
                else:
                    # If heavy rain, uv_index is lower
                    uv = random.uniform(0.1, 1)
            else:  # There are no rain
                rain = 0
                uv = random.uniform(5, 10)

            self.last_precipitation[d] = rain
            self.last_uv_index[d] = uv

    def next_data_stream(self) -> dict:
        """
        Randomly select the devices and modify sensors by adding some noise to previous value.
        This method will replace the previous value of the attributes with the new one.

        Returns:
            dict: A dictionary containing the device ID, timestamp, location, and sensor readings.
        """
        device = random.choice(self.devices)

        # simulate event_time with lateness
        delay_seconds = 0
        if random.random() < 0.3:  # 30% chance that the data will be late
            delay_seconds = random.randint(0, 10)

        timestamp = (datetime.now() - timedelta(seconds=delay_seconds)).strftime(
            "%Y-%m-%d %H:%M:%S.%f"
        )[:-3]

        # Modify temperature and humidity
        self.last_temperature[device] += random.gauss(0, 0.01)
        self.last_humidity[device] += int(random.gauss(0, 0.1) * 10)

        # Modify wind speed
        self.last_wind_speed[device] += random.gauss(0, 0.01)

        # Modify precipitation and uv_index
        if random.random() < 0.1:  # 10% chance to change
            self.last_precipitation[device] = max(
                0, self.last_precipitation[device] + random.gauss(0, 0.02)
            )
            self.last_uv_index[device] = max(
                0, self.last_uv_index[device] + random.gauss(0, 0.02)
            )

        # Get location
        latitude = self.locations[device][0]
        longitude = self.locations[device][1]

        # Structuring the data
        data = {
            "device": {
                "id": device,
                "location": {
                    "latitude": latitude,
                    "longitude": longitude,
                },
            },
            "timestamp": timestamp,
            "sensors": {
                "environment": {
                    "temperature": {
                        "value": round(self.last_temperature[device], 2),
                        "unit": "°C",
                    },
                    "humidity": {
                        "value": self.last_humidity[device],
                        "unit": "%",
                    },
                },
                "weather": {
                    "wind": {
                        "speed": {
                            "value": round(self.last_wind_speed[device], 2),
                            "unit": "km/h",
                        },
                        "direction": self.last_wind_direction[device],
                    },
                    "precipitation": {
                        "value": round(self.last_precipitation[device], 2),
                        "unit": "mm",
                    },
                    "uv_index": {
                        "value": round(self.last_uv_index[device], 2),
                    },
                },
            },
        }
        print(
            f"[{timestamp}] {device} | "
            f"Location: ({latitude}, {longitude}) | "
            f"Temp: {data['sensors']['environment']['temperature']['value']}°C | "
            f"Humidity: {data['sensors']['environment']['humidity']['value']}% | "
            f"Wind: {data['sensors']['weather']['wind']['speed']['value']} km/h {data['sensors']['weather']['wind']['direction']} | "
            f"Precipitation: {data['sensors']['weather']['precipitation']['value']} mm | "
            f"UV Index: {data['sensors']['weather']['uv_index']['value']}"
        )

        return data
